<?php
/**
 * Created by PhpStorm.
 * User: alexboyce
 * Date: 2/22/14
 * Time: 10:29 AM
 */

module_load_include('inc', 'jobbag_tasks', 'jobbag_tasks.entity');
module_load_include('inc', 'jobbag_tasks', 'jobbag_tasks.controller');
module_load_include('inc', 'jobbag_tasks', 'jobbag_tasks.field');

function jobbag_tasks_entity_info() {

  $info = array();

  // Tasks

  $info['jobbag_task_type'] = array(
    'label' => t('Job Bag Task Type'),
    'entity class' => 'JobBagTaskType',
    'controller class' => 'JobBagTaskTypeController',
    'base table' => 'jobbag_tasks_type',
    'entity keys' => array(
      'id' => 'tid',
      'label' => 'label',
      'name' => 'type'
    ),
    'fieldable' => TRUE,
    'exportable' => TRUE,
    'module' => 'jobbag_tasks',
    'bundle of' => 'jobbag_task',
    'admin ui' => array(
      'path' => 'admin/structure/job_tasks',
      'menu wildcard' => '%jobbag_task_type',
      'controller class' => 'JobBagTaskTypeUIController',
      'file' => 'jobbag_tasks.admin.inc'
    ),
    'access callback' => 'jobbag_task_type_access'
  );

  $info['jobbag_task'] = array(
    'label' => t('Job Bag Task'),
    'entity class' => 'JobBagTask',
    'controller class' => 'JobBagTaskController',
    'base table' => 'jobbag_tasks',
    'fieldable' => TRUE,
    'exportable' => FALSE,
    'entity keys' => array(
      'id' => 'id',
      'label' => 'label',
      'bundle' => 'type'
    ),
    'access callback' => 'jobbag_task_access',
    'module' => 'jobbag_tasks',
    'bundle keys' => array(
      'bundle' => 'type'
    ),
    'bundles' => array(),
    'view modes' => array(
      'full' => array(
        'label' => t('Default')
      ),
      'teaser' => array(
        'label' => t('Teaser')
      ),
      'field' => array(
        'label' => t('Field')
      )
    )
  );

  $types = db_select('jobbag_tasks_type', 't')
    ->fields('t', array('type', 'label'))
    ->execute()->fetchAllAssoc('type');

  foreach ($types as $type => $t) {
    $info['jobbag_task']['bundles'][$type] = array(
      'label' => t($t->label),
      'admin' => array(
        'path' => 'admin/structure/job_tasks/manage/%jobbag_task_type',
        'real path' => 'admin/structure/job_tasks/manage/' . str_replace('_', '-', $type),
        'bundle argument' => 4,
        'access arguments' => array('administer job tasks'),
        'file' => 'jobbag_tasks.admin.inc'
      )
    );
  }

  return $info;
}

/* Load Tasks */
function jobbag_task_load($id) {
  return entity_load_single('jobbag_task', $id);
}

function jobbag_task_load_multiple($ids = array(), $conditions = array(), $reset = FALSE) {
  return entity_load($ids, $conditions, $reset);
}

/* Load Task Types */
function jobbag_task_type_load($id) {
  return entity_load_single('jobbag_task_type', $id);
}

function jobbag_task_type_load_multiple($ids = array(), $conditions = array(), $reset = FALSE) {
  return entity_load('jobbag_task_type', $ids, $conditions, $reset);
}

/* Utility Functions */

function jobbag_task_status_check($status, JobBagTask $task, $account = NULL) {
  if ($task->status !== $status) {
    return FALSE;
  }
  if (!$account) {
    $account = $GLOBALS['user'];
  }

  if (in_array(0, $task->accounts)) {
    foreach ($task->roles() as $role) {
      if ($role->hasUser($account)) {
        return TRUE;
      }
    }
  }

  return in_array($account->uid, $task->accounts);
}

function jobbag_task_is_delegated(JobBagTask $task, $account = NULL) {
  return jobbag_task_status_check('delegated', $task, $account);
}

function jobbag_task_is_accepted(JobBagTask $task, $account = NULL) {
  return jobbag_task_status_check('accepted', $task, $account);
}

/* Permissions */

function jobbag_tasks_permission() {
  $perms = array();

  $perms['administer job tasks'] = array(
    'title' => t('Administer Job Tasks'),
    'description' => t('Create and manage tasks to be used with jobs'),
    'restrict access' => TRUE
  );

  return $perms;
}

function jobbag_tasks_job_role_perms() {
  $perms = array();

  $perms['create tasks'] = array(
    'title' => t('Create New Tasks'),
    'description' => t('Create new tasks for this job')
  );

  $perms['view tasks'] = array(
    'title' => t('View Job Tasks'),
    'description' => t('View all tasks for this job.
      Any tasks assigned to a role or user will be viewable to that user')
  );

  $perms['update tasks'] = array(
    'title' => t('Modify Tasks'),
    'description' => t('Modify task settings for tasks on this job. This include delegating tasks to different users')
  );

  $perms['delete tasks'] = array(
    'title' => t('Delete Tasks'),
    'description' => t('Remove tasks from the job. This cannot be undone.')
  );

  return $perms;
}

function jobbag_tasks_access($op, JobBag $job, JobBagTask $task = NULL, $account = NULL) {
  if (!$account) {
    $account = $GLOBALS['user'];
  }

  if ($account->uid == 1) {
    return TRUE;
  }

  if ($op == 'view' || $op == 'create') {
    if (!$task) {
      return jobbag_access($op.' tasks', $job, $account);
    }

    if (jobbag_access($op.' tasks', $job, $account)) {
      return TRUE;
    }

    return jobbag_task_is_delegated($task, $account) || jobbag_task_is_accepted($task, $account);

  }
  elseif(!!$task) {
    return jobbag_access($op.' tasks', $job, $account);
  }

  return FALSE;
}

function jobbag_task_access($op, JobBagTask $task = NULL, $account = NULL, $entity_type) {
  return jobbag_tasks_access($op, $task->job(), $task, $account);
}

function jobbag_task_type_access($op, $entity = NULL, $account = NULL, $entity_type) {
  if (!$account) {
    $account = $GLOBALS['user'];
  }

  if ($account->uid == 1) {
    return TRUE;
  }

  if (user_access('administer job tasks', $account)) {
    return TRUE;
  }

  return FALSE;
}

function jobbag_tasks_menu() {
  $items = array();

  $items['job/tasks/ajax'] = array(
    'page callback' => 'jobbag_tasks_ajax',
    'delivery callback' => 'ajax_deliver',
    'access arguments' => array('access content'),
    'theme callback' => 'ajax_base_page_theme',
    'type' => MENU_CALLBACK
  );

  $items['job/tasks/widget/ajax'] = array(
    'page callback' => 'jobbag_tasks_widget_ajax',
    'delivery callback' => 'ajax_deliver',
    'access arguments' => array('access content'),
    'theme callback' => 'ajax_base_page_theme',
    'type' => MENU_CALLBACK
  );

  return $items;
}

function jobbag_tasks_element_info() {
  $info = array();

  $info['task_field'] = array(
    '#process' => array('task_field_process'),
  );

  $info['task_field_item'] = array(
    '#input' => TRUE,
    '#pre_render' => array('task_field_item_pre_render'),
    '#process' => array('task_field_item_process'),
    '#theme_wrappers' => array('form_element'),
    '#types' => array(),
    '#default_value' => FALSE
  );

  $info['task_field_widget_item'] = array(
    '#input' => TRUE,
    '#process' => array('task_field_widget_item_process'),
    '#theme_wrappers' => array('form_element'),
    '#roles' => array(),
    '#account' => array(),
    '#weight' => 0
  );

  return $info;
}

function jobbag_tasks_theme() {
  $themes = array();

  $themes['tasks_field_widget_settings'] = array(
    'render element' => 'element',
    'file' => 'jobbag_tasks.theme'
  );

  $themes['task_field_item'] = array(
    'render element' => 'element',
    'file' => 'jobbag_tasks.theme'
  );

  $themes['task_field_widget'] = array(
    'render element' => 'element',
    'file' => 'jobbag_tasks.theme'
  );

  $themes['task_field_widget_item'] = array(
    'render element' => 'element',
    'file' => 'jobbag_tasks.theme'
  );

  $themes['task_formatter_items'] = array(
    'render element' => 'element',
    'file' => 'jobbag_tasks.theme'
  );

  return $themes;
}

function jobbag_tasks_ajax() {
  $form_parents = func_get_args();
  $form_build_id = (string) array_pop($form_parents);

  if (empty($_POST['form_build_id']) || $form_build_id != $_POST['form_build_id']) {
    // Invalid request.
    drupal_set_message(t('An unrecoverable error occurred.'), 'error');
    $commands = array();
    $commands[] = ajax_command_replace(NULL, theme('status_messages'));
    return array('#type' => 'ajax', '#commands' => $commands);
  }

  list($form, $form_state) = ajax_get_form();

  if (!$form) {
    // Invalid form_build_id.
    drupal_set_message(t('An unrecoverable error occurred. Use of this form has expired. Try reloading the page and submitting again.'), 'error');
    $commands = array();
    $commands[] = ajax_command_replace(NULL, theme('status_messages'));
    return array('#type' => 'ajax', '#commands' => $commands);
  }

  // Process user input. $form and $form_state are modified in the process.
  drupal_process_form($form['#form_id'], $form, $form_state);

  $current_element = &drupal_array_get_nested_value($form, $form_parents);

  $output = theme('status_messages') . drupal_render($current_element);
  $js = drupal_add_js();
  $settings = call_user_func_array('array_merge_recursive', $js['settings']['data']);

  $commands = array();
  $commands[] = ajax_command_replace(NULL, $output, $settings);
  return array('#type' => 'ajax', '#commands' => $commands);
}

function jobbag_tasks_widget_ajax() {
  $form_parents = func_get_args();
  $form_build_id = (string) array_pop($form_parents);
  if (empty($_POST['form_build_id']) || $form_build_id != $_POST['form_build_id']) {
    // Invalid request.
    drupal_set_message(t('An unrecoverable error occurred.'), 'error');
    $commands = array();
    $commands[] = ajax_command_replace(NULL, theme('status_messages'));
    return array('#type' => 'ajax', '#commands' => $commands);
  }

  list($form, $form_state) = ajax_get_form();

  if (!$form) {
    // Invalid form_build_id.
    drupal_set_message(t('An unrecoverable error occurred. Use of this form has expired. Try reloading the page and submitting again.'), 'error');
    $commands = array();
    $commands[] = ajax_command_replace(NULL, theme('status_messages'));
    return array('#type' => 'ajax', '#commands' => $commands);
  }

  $commands = array();
  $trigger = array_pop($form_parents);
  $element = &drupal_array_get_nested_value($form, $form_parents);
  if ($trigger == 'roles') {
    $job = $element['#entity'];
    $controller = entity_get_controller('job_role');
    $roles = drupal_array_get_nested_value($form_state['input'], array_merge($form_parents, array('roles')));
    $roles = array_filter($roles);
    $roles = !empty($roles) ? $controller->load($roles) : $job->roles;

    $accounts = array();
    $options = array();

    foreach ($roles as $role) {
      $accounts = array_merge($accounts, $role->users);
    }

    foreach ($accounts as $uid => $user) {
      $options[$uid] = $user->name;
    }
    $options = array_filter($options);
    array_unshift($options, t('Any User in Select Roles'));

    // Process user input. $form and $form_state are modified in the process.
    drupal_process_form($form['#form_id'], $form, $form_state);
    // Retrieve the element to be rendered.
    $element['accounts']['#options'] = $options;
    if (array_search($element['accounts']['#default_value'], array_keys($options)) === FALSE) {
      $element['accounts']['#default_value'] = NULL;
    }

    $output = render($element['accounts']);
    $js = drupal_add_js();
    $settings = call_user_func_array('array_merge_recursive', $js['settings']['data']);

    $commands[] = ajax_command_replace(NULL, $output, $settings);
  }
  return array('#type' => 'ajax', '#commands' => $commands);
}

function task_field_item_process($element, &$form_state, $form) {
  $value = isset($element['#value']) && isset($element['#value']['entity']) ? $element['#value']['entity'] : $element['#default_value'];
  $entity = !!$value ? jobbag_task_type_load($value) : FALSE;
  $element['#tree'] = TRUE;

  $ajax_settings = array(
    'path' => 'job/task/ajax/' . implode('/', $element['#array_parents']) . '/' . $form['form_build_id']['#value'],
    'wrapper' => $element['#id'] . '-ajax-wrapper'
  );

  // Set up the buttons first since we need to check if they were clicked.
  $element['add'] = array(
    '#name' => implode('_', $element['#parents']) . '_add',
    '#type' => 'submit',
    '#value' => t('Add'),
    '#validate' => array(),
    '#submit' => array('task_field_item_submit'),
    '#limit_validation_errors' => array($element['#parents']),
    '#ajax' => $ajax_settings,
    '#weight' => -5,
    '#theme_wrappers' => array()
  );

  $element['remove'] = array(
    '#name' => implode('_', $element['#parents']) . '_remove',
    '#type' => 'submit',
    '#value' => t('Remove'),
    '#validate' => array(),
    '#submit' => array('task_field_item_submit'),
    '#limit_validation_errors' => array($element['#parents']),
    '#ajax' => $ajax_settings,
    '#weight' => -5,
    '#theme_wrappers' => array()
  );

  if ($entity) {
    $element['#title'] = t($entity->label());
    $element['entity'] = array(
      '#type' => 'hidden',
      '#default_value' => $entity->identifier()
    );
    $element['#entity'] = $entity;
  }
  elseif (!empty($element['#types'])) {
    $element['entity'] = array(
      '#type' => 'select',
      '#title' => t('Add a Task Type'),
      '#options' => $element['#types'],
      '#theme_wrappers' => array()
    );
  }

  return $element;
}

function task_field_item_value(&$element, $input = FALSE, &$form_state) {
  $entity = 0;

  // Find the current value of this field from the form state.
  $form_state_entity = $form_state['values'];
  foreach ($element['#parents'] as $parent) {
    $form_state_entity = isset($form_state_entity[$parent]) ? $form_state_entity[$parent] : 0;
  }

  if (isset($form_state_entity['entity'])) {
    $entity = $form_state_entity['entity'];
  }
  elseif (is_numeric($form_state_entity)) {
    $entity = $form_state_entity;
  }

  if ($input !== FALSE) {
    $return = $input;
    if (isset($input['entity'])) {
      $entity = jobbag_task_type_load($input['entity']);
      if (!!$entity) {
        $entity = $entity->identifier();
      }
    }
  }
  else {
    $default_entity = isset($element['#default_value']) ? $element['#default_value'] : 0;
    $return = array('entity' => 0);

    if ($default_entity) {
      $entity = jobbag_task_type_load($default_entity);
      if (!!$entity) {
        $entity = $entity->identifier();
      }
    }
  }

  $return['entity'] = $entity;
  return $return;
}

function task_field_item_submit($form, &$form_state) {
  $parents = $form_state['triggering_element']['#array_parents'];
  $button_key = array_pop($parents);
  $element = drupal_array_get_nested_value($form, $parents);
  if ($button_key == 'remove') {
    form_set_value($element['entity'], NULL, $form_state);
    drupal_array_set_nested_value($form_state['input'], $element['#parents'], NULL);
  }

  $form_state['rebuild'] = TRUE;
}

function task_field_item_pre_render($element) {
  if (!isset($element['#value']['entity'])) {
    $element['remove']['#access'] = FALSE;
  }
  else {
    $element['add']['#access'] = FALSE;
  }
}

function task_field_widget_item_process($element, &$form_state, $form) {
  $parents = $element['#array_parents'];
  $values = $form_state['values'];
  $form_state_roles = drupal_array_get_nested_value($values, array_merge($parents, array('roles')));
  $form_state_accounts = drupal_array_get_nested_value($values, array_merge($parents, array('accounts')));
  $task = !!$element['#task'] ? jobbag_task_load($element['#task']) : FALSE;
  $task_type = jobbag_task_type_load($element['#task_type']);
  $job = $element['#entity'];

  if ($task && empty($element['#roles'])) {
    $element['#roles'] = $task->roles;
  }

  if ($task && empty($element['#accounts'])) {
    $element['#accounts'] = $task->accounts;
  }

  if ($task_type && !isset($element['#title'])) {
    $element['#title'] = $task_type->label();
  }

  $roles = !!$job ? $job->roles : array();

  $role_options = array(0 => t('Any Role'));
  $role_users = array();
  $account_options = array();

  foreach ($roles as $rid => $role) {
    $role_options[$rid] = job_role_label($role);
    $role_users = array_merge($role_users, job_roles_eligible_users($role, job_role_users($role)));
  }

  foreach ($role_users as $uid => $user) {
    $account_options[$uid] = $user->name;
  }

  array_unshift($account_options, t('Any Account in Selected Roles'));

  $wrapper = $element['#id'].'-ajax-accounts';
  $path = 'job/tasks/widget/ajax/';

  $element['#tree'] = TRUE;

  $element['id'] = array(
    '#type' => 'hidden',
    '#default_value' => isset($element['#task']) ? $element['#task'] : 0,
    '#theme_wrappers' => array()
  );

  $element['type'] = array(
    '#type' => 'hidden',
    '#default_value' => $element['#task_type'],
    '#theme_wrappers' => array()
  );

  $element['roles'] = array(
    '#type' => 'select',
    '#title' => t('Roles'),
    '#title_display' => 'hidden',
    '#theme_wrappers' => array(),
    '#options' => $role_options,
    '#default_value' => empty($form_state_roles) ? $element['#roles'] : $form_state_roles,
    '#multiple' => TRUE,
    '#ajax' => array(
      'wrapper' => $wrapper,
      'path' => $path.implode('/', array_merge($parents, array('roles', $form['form_build_id']['#value'])))
    )
  );

  $element['accounts'] = array(
    '#type' => 'select',
    '#title' => t('Accounts'),
    '#title_display' => 'hidden',
    '#theme_wrappers' => array(),
    '#options' => $account_options,
    '#default_value' => empty($form_state_accounts) ?  $element['#accounts'] : $form_state_accounts,
    '#prefix' => '<div id="'.$wrapper.'">',
    '#suffix' => '</div>',
    '#multiple' => TRUE
  );

  $element['status'] = array(
    '#type' => 'select',
    '#title' => t('Status'),
    '#title_display' => 'hidden',
    '#theme_wrappers' => array(),
    '#options' => array(
      'new' => t('New'),
      'delegated' => t('Delegated'),
      'accepted' => t('Accepted'),
      'completed' => t('Completed')
    ),
    '#default_value' => $element['#status']
  );

  return $element;
}

function task_field_process($element, &$form_state, $form) {
  global $user;
  $entity = $element['#entity'];
  $status = $entity->status;
  switch($status) {
    case 'new':
      $element['status'] = t('New');
      break;
    case 'delegated':

      break;
    case 'accepted':

      break;
    case 'completed':
      $element['status'] = t('Completed');
      break;
  }

  return $element;
}